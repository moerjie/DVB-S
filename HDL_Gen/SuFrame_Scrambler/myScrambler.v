// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\SuFrame_Scrambler\myScrambler.v
// Created: 2024-05-31 10:26:21
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: myScrambler
// Source Path: SuFrame_Scrambler/DataSource_Scrambler/myScrambler
// Hierarchy Level: 1
// Model version: 1.2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module myScrambler
          (clk,
           rst_n,
           enb,
           DataIn,
           EN,
           RST_IniState,
           Trigger,
           Out1);


  input   clk;
  input   rst_n;
  input   enb;
  input   [7:0] DataIn;  // uint8
  input   EN;
  input   RST_IniState;
  input   Trigger;
  output  [7:0] Out1;  // uint8


  wire enb_gated;
  reg  Trigger_delayed;
  wire Trigger_emulated;
  wire [7:0] alpha14_out1;  // uint8
  reg [7:0] alpha15_switch_delay;  // ufix8
  wire [7:0] alpha15_out1;  // uint8
  wire [7:0] Bitwise_Operator_out1;  // uint8
  reg [7:0] alpha1_switch_delay;  // ufix8
  wire [7:0] alpha1_out1;  // uint8
  reg [7:0] alpha2_switch_delay;  // ufix8
  wire [7:0] alpha2_out1;  // uint8
  reg [7:0] alpha3_switch_delay;  // ufix8
  wire [7:0] alpha3_out1;  // uint8
  reg [7:0] alpha4_switch_delay;  // ufix8
  wire [7:0] alpha4_out1;  // uint8
  reg [7:0] alpha5_switch_delay;  // ufix8
  wire [7:0] alpha5_out1;  // uint8
  reg [7:0] alpha6_switch_delay;  // ufix8
  wire [7:0] alpha6_out1;  // uint8
  reg [7:0] alpha7_switch_delay;  // ufix8
  wire [7:0] alpha7_out1;  // uint8
  reg [7:0] alpha8_switch_delay;  // ufix8
  wire [7:0] alpha8_out1;  // uint8
  reg [7:0] alpha9_switch_delay;  // ufix8
  wire [7:0] alpha9_out1;  // uint8
  reg [7:0] alpha10_switch_delay;  // ufix8
  wire [7:0] alpha10_out1;  // uint8
  reg [7:0] alpha11_switch_delay;  // ufix8
  wire [7:0] alpha11_out1;  // uint8
  reg [7:0] alpha12_switch_delay;  // ufix8
  wire [7:0] alpha12_out1;  // uint8
  reg [7:0] alpha13_switch_delay;  // ufix8
  wire [7:0] alpha13_out1;  // uint8
  reg [7:0] alpha14_switch_delay;  // ufix8
  wire [7:0] Data_Type_Conversion_out1;  // uint8
  wire [7:0] Bitwise_Operator1_out1;  // uint8
  wire [7:0] Bitwise_Operator2_out1;  // uint8
  wire [7:0] Bitwise_Operator2_out1_bypass;  // uint8
  reg [7:0] Bitwise_Operator2_out1_last_value;  // uint8


  always @(posedge clk)
    begin : Trigger_delay
      if (!rst_n) begin
        Trigger_delayed <= 1'b1;
      end
      else begin
        if (enb) begin
          Trigger_delayed <= Trigger;
        end
      end
    end

  assign Trigger_emulated = !Trigger_delayed && Trigger;

  assign enb_gated = Trigger_emulated && enb;

  always @(posedge clk)
    begin : alpha15_process
      if (rst_n == 1'b0) begin
        alpha15_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha15_switch_delay <= 8'b00000000;
          end
          else begin
            alpha15_switch_delay <= alpha14_out1;
          end
        end
      end
    end

  assign alpha15_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha15_switch_delay);



  always @(posedge clk)
    begin : alpha1_process
      if (rst_n == 1'b0) begin
        alpha1_switch_delay <= 8'b00000001;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha1_switch_delay <= 8'b00000001;
          end
          else begin
            alpha1_switch_delay <= Bitwise_Operator_out1;
          end
        end
      end
    end

  assign alpha1_out1 = (RST_IniState == 1'b1 ? 8'b00000001 :
              alpha1_switch_delay);



  always @(posedge clk)
    begin : alpha2_process
      if (rst_n == 1'b0) begin
        alpha2_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha2_switch_delay <= 8'b00000000;
          end
          else begin
            alpha2_switch_delay <= alpha1_out1;
          end
        end
      end
    end

  assign alpha2_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha2_switch_delay);



  always @(posedge clk)
    begin : alpha3_process
      if (rst_n == 1'b0) begin
        alpha3_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha3_switch_delay <= 8'b00000000;
          end
          else begin
            alpha3_switch_delay <= alpha2_out1;
          end
        end
      end
    end

  assign alpha3_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha3_switch_delay);



  always @(posedge clk)
    begin : alpha4_process
      if (rst_n == 1'b0) begin
        alpha4_switch_delay <= 8'b00000001;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha4_switch_delay <= 8'b00000001;
          end
          else begin
            alpha4_switch_delay <= alpha3_out1;
          end
        end
      end
    end

  assign alpha4_out1 = (RST_IniState == 1'b1 ? 8'b00000001 :
              alpha4_switch_delay);



  always @(posedge clk)
    begin : alpha5_process
      if (rst_n == 1'b0) begin
        alpha5_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha5_switch_delay <= 8'b00000000;
          end
          else begin
            alpha5_switch_delay <= alpha4_out1;
          end
        end
      end
    end

  assign alpha5_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha5_switch_delay);



  always @(posedge clk)
    begin : alpha6_process
      if (rst_n == 1'b0) begin
        alpha6_switch_delay <= 8'b00000001;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha6_switch_delay <= 8'b00000001;
          end
          else begin
            alpha6_switch_delay <= alpha5_out1;
          end
        end
      end
    end

  assign alpha6_out1 = (RST_IniState == 1'b1 ? 8'b00000001 :
              alpha6_switch_delay);



  always @(posedge clk)
    begin : alpha7_process
      if (rst_n == 1'b0) begin
        alpha7_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha7_switch_delay <= 8'b00000000;
          end
          else begin
            alpha7_switch_delay <= alpha6_out1;
          end
        end
      end
    end

  assign alpha7_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha7_switch_delay);



  always @(posedge clk)
    begin : alpha8_process
      if (rst_n == 1'b0) begin
        alpha8_switch_delay <= 8'b00000001;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha8_switch_delay <= 8'b00000001;
          end
          else begin
            alpha8_switch_delay <= alpha7_out1;
          end
        end
      end
    end

  assign alpha8_out1 = (RST_IniState == 1'b1 ? 8'b00000001 :
              alpha8_switch_delay);



  always @(posedge clk)
    begin : alpha9_process
      if (rst_n == 1'b0) begin
        alpha9_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha9_switch_delay <= 8'b00000000;
          end
          else begin
            alpha9_switch_delay <= alpha8_out1;
          end
        end
      end
    end

  assign alpha9_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha9_switch_delay);



  always @(posedge clk)
    begin : alpha10_process
      if (rst_n == 1'b0) begin
        alpha10_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha10_switch_delay <= 8'b00000000;
          end
          else begin
            alpha10_switch_delay <= alpha9_out1;
          end
        end
      end
    end

  assign alpha10_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha10_switch_delay);



  always @(posedge clk)
    begin : alpha11_process
      if (rst_n == 1'b0) begin
        alpha11_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha11_switch_delay <= 8'b00000000;
          end
          else begin
            alpha11_switch_delay <= alpha10_out1;
          end
        end
      end
    end

  assign alpha11_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha11_switch_delay);



  always @(posedge clk)
    begin : alpha12_process
      if (rst_n == 1'b0) begin
        alpha12_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha12_switch_delay <= 8'b00000000;
          end
          else begin
            alpha12_switch_delay <= alpha11_out1;
          end
        end
      end
    end

  assign alpha12_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha12_switch_delay);



  always @(posedge clk)
    begin : alpha13_process
      if (rst_n == 1'b0) begin
        alpha13_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha13_switch_delay <= 8'b00000000;
          end
          else begin
            alpha13_switch_delay <= alpha12_out1;
          end
        end
      end
    end

  assign alpha13_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha13_switch_delay);



  always @(posedge clk)
    begin : alpha14_process
      if (rst_n == 1'b0) begin
        alpha14_switch_delay <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          if (RST_IniState == 1'b1) begin
            alpha14_switch_delay <= 8'b00000000;
          end
          else begin
            alpha14_switch_delay <= alpha13_out1;
          end
        end
      end
    end

  assign alpha14_out1 = (RST_IniState == 1'b1 ? 8'b00000000 :
              alpha14_switch_delay);



  assign Bitwise_Operator_out1 = alpha14_out1 ^ alpha15_out1;



  assign Data_Type_Conversion_out1 = {7'b0, EN};



  assign Bitwise_Operator1_out1 = Bitwise_Operator_out1 & Data_Type_Conversion_out1;



  assign Bitwise_Operator2_out1 = Bitwise_Operator1_out1 ^ DataIn;



  always @(posedge clk)
    begin : Out1_bypass_process
      if (rst_n == 1'b0) begin
        Bitwise_Operator2_out1_last_value <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          Bitwise_Operator2_out1_last_value <= Bitwise_Operator2_out1_bypass;
        end
      end
    end



  assign Bitwise_Operator2_out1_bypass = (Trigger_emulated == 1'b0 ? Bitwise_Operator2_out1_last_value :
              Bitwise_Operator2_out1);



  assign Out1 = Bitwise_Operator2_out1_bypass;

endmodule  // myScrambler

