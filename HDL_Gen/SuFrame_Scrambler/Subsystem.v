// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\SuFrame_Scrambler\Subsystem.v
// Created: 2024-05-30 20:50:30
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: SuFrame_Scrambler/DataSource_Scrambler/Subsystem
// Hierarchy Level: 1
// Model version: 1.2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           rst_n,
           enb,
           DataGenEn);


  input   clk;
  input   rst_n;
  input   enb;
  output  DataGenEn;


  wire HDL_Counter2_ctrl_const_out;
  reg  HDL_Counter2_ctrl_delay_out;
  wire [7:0] HDL_Counter2_Initial_Val_out;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] HDL_Counter2_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  reg [7:0] HDL_Counter2_out;  // uint8
  wire [7:0] Constant1_out1;  // uint8
  wire Relational_Operator_relop1;


  assign HDL_Counter2_ctrl_const_out = 1'b1;



  always @(posedge clk)
    begin : HDL_Counter2_ctrl_delay_process
      if (rst_n == 1'b0) begin
        HDL_Counter2_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter2_ctrl_delay_out <= HDL_Counter2_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter2_Initial_Val_out = 8'b00000001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000001;



  assign count = HDL_Counter2_out1 + count_step;



  assign need_to_wrap = HDL_Counter2_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk)
    begin : HDL_Counter2_process
      if (rst_n == 1'b0) begin
        HDL_Counter2_out <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter2_out <= count_value;
        end
      end
    end



  assign HDL_Counter2_out1 = (HDL_Counter2_ctrl_delay_out == 1'b0 ? HDL_Counter2_Initial_Val_out :
              HDL_Counter2_out);



  assign Constant1_out1 = 8'b00011001;



  assign Relational_Operator_relop1 = HDL_Counter2_out1 == Constant1_out1;



  assign DataGenEn = Relational_Operator_relop1;

endmodule  // Subsystem

