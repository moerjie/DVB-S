// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS_axi4stream\hdlsrc\DVBS_AXI4Stream\CLKdivide.v
// Created: 2024-06-07 16:51:12
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CLKdivide
// Source Path: DVBS_AXI4Stream/DVB-S/DataSource_Scrambler/CLKdivide
// Hierarchy Level: 2
// Model version: 1.65
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module CLKdivide
          (clk,
           reset_n,
           enb,
           DataGenEn,
           BinEn);


  input   clk;
  input   reset_n;
  input   enb;
  output  DataGenEn;
  output  BinEn;


  wire HDL_Counter_ctrl_const_out;
  reg  HDL_Counter_ctrl_delay_out;
  wire [7:0] HDL_Counter_Initial_Val_out;  // uint8
  wire HDL_Counter2_ctrl_const_out;
  reg  HDL_Counter2_ctrl_delay_out;
  wire [7:0] HDL_Counter2_Initial_Val_out;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] HDL_Counter2_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  reg [7:0] HDL_Counter2_out;  // uint8
  wire [7:0] Constant1_out1;  // uint8
  wire Relational_Operator_relop1;
  wire [7:0] count_step_1;  // uint8
  wire [7:0] count_from_1;  // uint8
  wire [7:0] HDL_Counter_out1;  // uint8
  wire [7:0] count_1;  // uint8
  wire need_to_wrap_1;
  wire [7:0] count_value_1;  // uint8
  wire [7:0] count_2;  // uint8
  reg [7:0] HDL_Counter_out;  // uint8
  wire [7:0] Constant_out1;  // uint8
  wire Relational_Operator1_relop1;
  wire Detect_Rise_Positive_out1;
  reg  Delay_out1;


  assign HDL_Counter_ctrl_const_out = 1'b1;



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter_ctrl_delay_process
      if (reset_n == 1'b0) begin
        HDL_Counter_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter_Initial_Val_out = 8'b00000001;



  assign HDL_Counter2_ctrl_const_out = 1'b1;



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter2_ctrl_delay_process
      if (reset_n == 1'b0) begin
        HDL_Counter2_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter2_ctrl_delay_out <= HDL_Counter2_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter2_Initial_Val_out = 8'b00000001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000001;



  assign count = HDL_Counter2_out1 + count_step;



  assign need_to_wrap = HDL_Counter2_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter2_process
      if (reset_n == 1'b0) begin
        HDL_Counter2_out <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter2_out <= count_value;
        end
      end
    end



  assign HDL_Counter2_out1 = (HDL_Counter2_ctrl_delay_out == 1'b0 ? HDL_Counter2_Initial_Val_out :
              HDL_Counter2_out);



  assign Constant1_out1 = 8'b00011001;



  assign Relational_Operator_relop1 = HDL_Counter2_out1 == Constant1_out1;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 8
  assign count_step_1 = 8'b00000001;



  assign count_from_1 = 8'b00000001;



  assign count_1 = HDL_Counter_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter_out1 == 8'b00001000;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_1 :
              count_from_1);



  assign count_2 = (Relational_Operator_relop1 == 1'b0 ? HDL_Counter_out1 :
              count_value_1);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter_process
      if (reset_n == 1'b0) begin
        HDL_Counter_out <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out <= count_2;
        end
      end
    end



  assign HDL_Counter_out1 = (HDL_Counter_ctrl_delay_out == 1'b0 ? HDL_Counter_Initial_Val_out :
              HDL_Counter_out);



  assign Constant_out1 = 8'b00001000;



  assign Relational_Operator1_relop1 = HDL_Counter_out1 == Constant_out1;



  Detect_Rise_Positive u_Detect_Rise_Positive (.clk(clk),
                                               .reset_n(reset_n),
                                               .enb(enb),
                                               .U(Relational_Operator1_relop1),
                                               .Y(Detect_Rise_Positive_out1)
                                               );

  assign DataGenEn = Detect_Rise_Positive_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay_process
      if (reset_n == 1'b0) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Relational_Operator_relop1;
        end
      end
    end



  assign BinEn = Delay_out1;

endmodule  // CLKdivide

