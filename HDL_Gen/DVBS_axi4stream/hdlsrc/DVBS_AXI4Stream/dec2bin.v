// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS_axi4stream\hdlsrc\DVBS_AXI4Stream\dec2bin.v
// Created: 2024-06-07 16:51:13
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dec2bin
// Source Path: DVBS_AXI4Stream/DVB-S/dec2bin
// Hierarchy Level: 1
// Model version: 1.65
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module dec2bin
          (clk,
           reset_n,
           enb,
           DEC_IN,
           BinGen,
           BIN_OUT);


  input   clk;
  input   reset_n;
  input   enb;
  input   [7:0] DEC_IN;  // uint8
  input   BinGen;
  output  BIN_OUT;


  wire HDL_Counter1_ctrl_const_out;
  reg  HDL_Counter1_ctrl_delay_out;
  wire [7:0] HDL_Counter1_Initial_Val_out;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] HDL_Counter1_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] count_1;  // uint8
  reg [7:0] HDL_Counter1_out;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator19;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator18;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator17;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator16;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator15;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator14;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator13;  // uint8
  wire [7:0] bitMask_for_Bitwise_Operator12;  // uint8
  reg [7:0] HDL_Counter1_out1_1;  // uint8
  wire [7:0] Bitwise_Operator19_out1;  // uint8
  wire Data_Type_Conversion12_out1;
  wire [7:0] Bitwise_Operator18_out1;  // uint8
  wire Data_Type_Conversion13_out1;
  wire [7:0] Bitwise_Operator17_out1;  // uint8
  wire Data_Type_Conversion14_out1;
  wire [7:0] Bitwise_Operator16_out1;  // uint8
  wire Data_Type_Conversion15_out1;
  wire [7:0] Bitwise_Operator15_out1;  // uint8
  wire Data_Type_Conversion16_out1;
  wire [7:0] Bitwise_Operator14_out1;  // uint8
  wire Data_Type_Conversion17_out1;
  wire [7:0] Bitwise_Operator13_out1;  // uint8
  wire Data_Type_Conversion18_out1;
  wire [7:0] Bitwise_Operator12_out1;  // uint8
  wire Data_Type_Conversion19_out1;
  wire Multiport_Switch_out1;


  assign HDL_Counter1_ctrl_const_out = 1'b1;



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter1_ctrl_delay_process
      if (reset_n == 1'b0) begin
        HDL_Counter1_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter1_ctrl_delay_out <= HDL_Counter1_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter1_Initial_Val_out = 8'b00000001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 8
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000001;



  assign count = HDL_Counter1_out1 + count_step;



  assign need_to_wrap = HDL_Counter1_out1 == 8'b00001000;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (BinGen == 1'b0 ? HDL_Counter1_out1 :
              count_value);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter1_process
      if (reset_n == 1'b0) begin
        HDL_Counter1_out <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out <= count_1;
        end
      end
    end



  assign HDL_Counter1_out1 = (HDL_Counter1_ctrl_delay_out == 1'b0 ? HDL_Counter1_Initial_Val_out :
              HDL_Counter1_out);



  assign bitMask_for_Bitwise_Operator19 = 8'b10000000;



  assign bitMask_for_Bitwise_Operator18 = 8'b01000000;



  assign bitMask_for_Bitwise_Operator17 = 8'b00100000;



  assign bitMask_for_Bitwise_Operator16 = 8'b00010000;



  assign bitMask_for_Bitwise_Operator15 = 8'b00001000;



  assign bitMask_for_Bitwise_Operator14 = 8'b00000100;



  assign bitMask_for_Bitwise_Operator13 = 8'b00000010;



  assign bitMask_for_Bitwise_Operator12 = 8'b00000001;



  always @(posedge clk or negedge reset_n)
    begin : delayMatch_process
      if (reset_n == 1'b0) begin
        HDL_Counter1_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1_1 <= HDL_Counter1_out1;
        end
      end
    end



  assign Bitwise_Operator19_out1 = DEC_IN & bitMask_for_Bitwise_Operator19;



  assign Data_Type_Conversion12_out1 = (Bitwise_Operator19_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator18_out1 = DEC_IN & bitMask_for_Bitwise_Operator18;



  assign Data_Type_Conversion13_out1 = (Bitwise_Operator18_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator17_out1 = DEC_IN & bitMask_for_Bitwise_Operator17;



  assign Data_Type_Conversion14_out1 = (Bitwise_Operator17_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator16_out1 = DEC_IN & bitMask_for_Bitwise_Operator16;



  assign Data_Type_Conversion15_out1 = (Bitwise_Operator16_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator15_out1 = DEC_IN & bitMask_for_Bitwise_Operator15;



  assign Data_Type_Conversion16_out1 = (Bitwise_Operator15_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator14_out1 = DEC_IN & bitMask_for_Bitwise_Operator14;



  assign Data_Type_Conversion17_out1 = (Bitwise_Operator14_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator13_out1 = DEC_IN & bitMask_for_Bitwise_Operator13;



  assign Data_Type_Conversion18_out1 = (Bitwise_Operator13_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Bitwise_Operator12_out1 = DEC_IN & bitMask_for_Bitwise_Operator12;



  assign Data_Type_Conversion19_out1 = (Bitwise_Operator12_out1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign Multiport_Switch_out1 = (HDL_Counter1_out1_1 == 8'b00000001 ? Data_Type_Conversion12_out1 :
              (HDL_Counter1_out1_1 == 8'b00000010 ? Data_Type_Conversion13_out1 :
              (HDL_Counter1_out1_1 == 8'b00000011 ? Data_Type_Conversion14_out1 :
              (HDL_Counter1_out1_1 == 8'b00000100 ? Data_Type_Conversion15_out1 :
              (HDL_Counter1_out1_1 == 8'b00000101 ? Data_Type_Conversion16_out1 :
              (HDL_Counter1_out1_1 == 8'b00000110 ? Data_Type_Conversion17_out1 :
              (HDL_Counter1_out1_1 == 8'b00000111 ? Data_Type_Conversion18_out1 :
              Data_Type_Conversion19_out1)))))));



  assign BIN_OUT = Multiport_Switch_out1;

endmodule  // dec2bin

