// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS_axi4stream\hdlsrc\DVBS_AXI4Stream\DataSource_Scrambler.v
// Created: 2024-06-07 16:51:13
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DataSource_Scrambler
// Source Path: DVBS_AXI4Stream/DVB-S/DataSource_Scrambler
// Hierarchy Level: 1
// Model version: 1.65
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module DataSource_Scrambler
          (clk,
           reset_n,
           enb,
           simStart,
           simEnd,
           simVLD,
           ScramblerOut,
           BinEn,
           DataGenEn);


  input   clk;
  input   reset_n;
  input   enb;
  output  simStart;
  output  simEnd;
  output  simVLD;
  output  [7:0] ScramblerOut;  // uint8
  output  BinEn;
  output  DataGenEn;


  wire CLKdivide_out1;
  wire CLKdivide_out2;
  wire [7:0] sigSource_out4;  // uint8
  wire HeaderProcess_out1;
  wire HeaderProcess_out2;
  wire HeaderProcess_out3;
  wire [7:0] HeaderProcess_out4;  // uint8
  reg  Delay7_out1;
  wire sigSource_out1;
  wire sigSource_out2;
  wire sigSource_out3;
  reg  Delay_out1;
  reg  [1:0] Delay1_reg;  // ufix1 [2]
  wire Delay1_out1;
  reg  Delay2_out1;
  reg [7:0] Delay10_out1;  // uint8
  reg  HeaderProcess_out2_1;
  reg  Delay8_out1;
  reg  HeaderProcess_out3_1;
  reg  Delay9_out1;
  reg  CLKdivide_out1_1;
  wire [7:0] myScrambler_out1;  // uint8
  reg  Delay4_out1;
  reg  Delay5_out1;


  CLKdivide u_CLKdivide (.clk(clk),
                         .reset_n(reset_n),
                         .enb(enb),
                         .DataGenEn(CLKdivide_out1),
                         .BinEn(CLKdivide_out2)
                         );

  HeaderProcess u_HeaderProcess (.clk(clk),
                                 .reset_n(reset_n),
                                 .enb(enb),
                                 .simDataIn(sigSource_out4),  // uint8
                                 .DataGenEn(CLKdivide_out1),
                                 .DataGenEN_1(HeaderProcess_out1),
                                 .ScrambleEn(HeaderProcess_out2),
                                 .ScrambleRst(HeaderProcess_out3),
                                 .DataIn(HeaderProcess_out4)  // uint8
                                 );

  always @(posedge clk or negedge reset_n)
    begin : Delay7_process
      if (reset_n == 1'b0) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= HeaderProcess_out1;
        end
      end
    end



  sigSource u_sigSource (.clk(clk),
                         .reset_n(reset_n),
                         .enb(enb),
                         .DataGenEn(CLKdivide_out1),
                         .Enable(Delay7_out1),
                         .simStart(sigSource_out1),
                         .simEnd(sigSource_out2),
                         .simEN(sigSource_out3),
                         .simDataIn(sigSource_out4)  // uint8
                         );

  always @(posedge clk or negedge reset_n)
    begin : Delay_process
      if (reset_n == 1'b0) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= sigSource_out1;
        end
      end
    end



  assign simStart = Delay_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay1_process
      if (reset_n == 1'b0) begin
        Delay1_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= sigSource_out2;
          Delay1_reg[1] <= Delay1_reg[0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];



  assign simEnd = Delay1_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay2_process
      if (reset_n == 1'b0) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= sigSource_out3;
        end
      end
    end



  assign simVLD = Delay2_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay10_process
      if (reset_n == 1'b0) begin
        Delay10_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= HeaderProcess_out4;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : delayMatch_process
      if (reset_n == 1'b0) begin
        HeaderProcess_out2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          HeaderProcess_out2_1 <= HeaderProcess_out2;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : Delay8_process
      if (reset_n == 1'b0) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= HeaderProcess_out2_1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : delayMatch1_process
      if (reset_n == 1'b0) begin
        HeaderProcess_out3_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          HeaderProcess_out3_1 <= HeaderProcess_out3;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : Delay9_process
      if (reset_n == 1'b0) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= HeaderProcess_out3_1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : delayMatch2_process
      if (reset_n == 1'b0) begin
        CLKdivide_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          CLKdivide_out1_1 <= CLKdivide_out1;
        end
      end
    end



  myScrambler u_myScrambler (.clk(clk),
                             .reset_n(reset_n),
                             .enb(enb),
                             .DataIn(Delay10_out1),  // uint8
                             .EN(Delay8_out1),
                             .RST_IniState(Delay9_out1),
                             .Trigger(CLKdivide_out1_1),
                             .Out1(myScrambler_out1)  // uint8
                             );

  assign ScramblerOut = myScrambler_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay4_process
      if (reset_n == 1'b0) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= CLKdivide_out2;
        end
      end
    end



  assign BinEn = Delay4_out1;

  always @(posedge clk or negedge reset_n)
    begin : Delay5_process
      if (reset_n == 1'b0) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= CLKdivide_out1;
        end
      end
    end



  assign DataGenEn = Delay5_out1;

endmodule  // DataSource_Scrambler

