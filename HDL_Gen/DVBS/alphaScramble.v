// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\FPGA_myself\DVB-S\HDL_Gen\DVBS\alphaScramble.v
// Created: 2024-05-13 14:41:28
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.5625e-10
// Target subsystem base rate: 1e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// alphaScramble_OUT             ce_out        1e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: alphaScramble
// Source Path: DVBS/ Scramble
// Hierarchy Level: 0
// Model version: 1.43
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module alphaScramble
          (clk,
           reset_n,
           clk_enable,
           SEQ_IN,
           ce_out,
           alphaScramble_OUT);


  input   clk;
  input   reset_n;
  input   clk_enable;
  input   [7:0] SEQ_IN;  // uint8
  output  ce_out;
  output  [7:0] alphaScramble_OUT;  // uint8


  wire enb_1_64_0;
  reg [7:0] alpha14_out1;  // uint8
  reg [7:0] alpha15_out1;  // uint8
  wire [7:0] Bitwise_Operator2_out1;  // uint8
  reg [7:0] alpha1_out1;  // uint8
  reg [7:0] alpha2_out1;  // uint8
  reg [7:0] alpha3_out1;  // uint8
  reg [7:0] alpha4_out1;  // uint8
  reg [7:0] alpha5_out1;  // uint8
  reg [7:0] alpha6_out1;  // uint8
  reg [7:0] alpha7_out1;  // uint8
  reg [7:0] alpha8_out1;  // uint8
  reg [7:0] alpha9_out1;  // uint8
  reg [7:0] alpha10_out1;  // uint8
  reg [7:0] alpha11_out1;  // uint8
  reg [7:0] alpha12_out1;  // uint8
  reg [7:0] alpha13_out1;  // uint8
  wire [7:0] Constant_out1;  // uint8
  wire [7:0] Bitwise_Operator_out1;  // uint8
  wire [7:0] Bitwise_Operator1_out1;  // uint8


  assign enb_1_64_0 = clk_enable;

  always @(posedge clk or negedge reset_n)
    begin : alpha15_process
      if (reset_n == 1'b0) begin
        alpha15_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha15_out1 <= alpha14_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha1_process
      if (reset_n == 1'b0) begin
        alpha1_out1 <= 8'b00000001;
      end
      else begin
        if (enb_1_64_0) begin
          alpha1_out1 <= Bitwise_Operator2_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha2_process
      if (reset_n == 1'b0) begin
        alpha2_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha2_out1 <= alpha1_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha3_process
      if (reset_n == 1'b0) begin
        alpha3_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha3_out1 <= alpha2_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha4_process
      if (reset_n == 1'b0) begin
        alpha4_out1 <= 8'b00000001;
      end
      else begin
        if (enb_1_64_0) begin
          alpha4_out1 <= alpha3_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha5_process
      if (reset_n == 1'b0) begin
        alpha5_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha5_out1 <= alpha4_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha6_process
      if (reset_n == 1'b0) begin
        alpha6_out1 <= 8'b00000001;
      end
      else begin
        if (enb_1_64_0) begin
          alpha6_out1 <= alpha5_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha7_process
      if (reset_n == 1'b0) begin
        alpha7_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha7_out1 <= alpha6_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha8_process
      if (reset_n == 1'b0) begin
        alpha8_out1 <= 8'b00000001;
      end
      else begin
        if (enb_1_64_0) begin
          alpha8_out1 <= alpha7_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha9_process
      if (reset_n == 1'b0) begin
        alpha9_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha9_out1 <= alpha8_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha10_process
      if (reset_n == 1'b0) begin
        alpha10_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha10_out1 <= alpha9_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha11_process
      if (reset_n == 1'b0) begin
        alpha11_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha11_out1 <= alpha10_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha12_process
      if (reset_n == 1'b0) begin
        alpha12_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha12_out1 <= alpha11_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha13_process
      if (reset_n == 1'b0) begin
        alpha13_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha13_out1 <= alpha12_out1;
        end
      end
    end



  always @(posedge clk or negedge reset_n)
    begin : alpha14_process
      if (reset_n == 1'b0) begin
        alpha14_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          alpha14_out1 <= alpha13_out1;
        end
      end
    end



  assign Bitwise_Operator2_out1 = alpha14_out1 ^ alpha15_out1;



  assign Constant_out1 = 8'b00000001;



  assign Bitwise_Operator_out1 = Bitwise_Operator2_out1 & Constant_out1;



  assign Bitwise_Operator1_out1 = Bitwise_Operator_out1 ^ SEQ_IN;



  assign alphaScramble_OUT = Bitwise_Operator1_out1;

  assign ce_out = clk_enable;

endmodule  // alphaScramble

