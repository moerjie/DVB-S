// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS\HeaderProcess.v
// Created: 2024-05-31 21:01:54
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HeaderProcess
// Source Path: DVBS/DataSource_Scrambler/HeaderProcess
// Hierarchy Level: 1
// Model version: 1.56
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HeaderProcess
          (clk,
           reset_n,
           enb,
           simDataIn,
           DataGenEn,
           DataGenEN_1,
           ScrambleEn,
           ScrambleRst,
           DataIn);


  input   clk;
  input   reset_n;
  input   enb;
  input   [7:0] simDataIn;  // uint8
  input   DataGenEn;
  output  DataGenEN_1;
  output  ScrambleEn;
  output  ScrambleRst;
  output  [7:0] DataIn;  // uint8


  wire HDL_Counter_ctrl_const_out;
  reg  HDL_Counter_ctrl_delay_out;
  wire [7:0] HDL_Counter_Initial_Val_out;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] HDL_Counter_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] count_1;  // uint8
  reg [7:0] HDL_Counter_out;  // uint8
  wire [7:0] Constant_out1;  // uint8
  wire Relational_Operator_relop1;
  wire [15:0] count_step_1;  // uint16
  wire [15:0] count_from_1;  // uint16
  reg [15:0] HDL_Counter1_out1;  // uint16
  wire [15:0] count_2;  // uint16
  wire need_to_wrap_1;
  wire [15:0] count_value_1;  // uint16
  wire [15:0] count_3;  // uint16
  wire [7:0] Constant2_out1;  // uint8
  wire [15:0] Relational_Operator1_1_1;  // ufix16
  wire Relational_Operator1_relop1;
  wire Logical_Operator_out1;
  wire [7:0] Constant1_out1;  // uint8
  wire [7:0] Multiport_Switch_out1;  // uint8
  wire [7:0] Bitwise_Operator_out1;  // uint8
  wire [7:0] Multiport_Switch1_out1;  // uint8


  assign HDL_Counter_ctrl_const_out = 1'b1;



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter_ctrl_delay_process
      if (reset_n == 1'b0) begin
        HDL_Counter_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter_Initial_Val_out = 8'b00000001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 204
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000001;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 8'b11001100;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (DataGenEn == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter_process
      if (reset_n == 1'b0) begin
        HDL_Counter_out <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out <= count_1;
        end
      end
    end



  assign HDL_Counter_out1 = (HDL_Counter_ctrl_delay_out == 1'b0 ? HDL_Counter_Initial_Val_out :
              HDL_Counter_out);



  assign Constant_out1 = 8'b10111100;



  assign Relational_Operator_relop1 = HDL_Counter_out1 <= Constant_out1;



  assign DataGenEN_1 = Relational_Operator_relop1;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1631
  assign count_step_1 = 16'b0000000000000001;



  assign count_from_1 = 16'b0000000000000000;



  assign count_2 = HDL_Counter1_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter1_out1 == 16'b0000011001011111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (DataGenEn == 1'b0 ? HDL_Counter1_out1 :
              count_value_1);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter1_process
      if (reset_n == 1'b0) begin
        HDL_Counter1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1 <= count_3;
        end
      end
    end



  assign Constant2_out1 = 8'b00000000;



  assign Relational_Operator1_1_1 = {8'b0, Constant2_out1};
  assign Relational_Operator1_relop1 = HDL_Counter1_out1 == Relational_Operator1_1_1;



  assign Logical_Operator_out1 =  ~ Relational_Operator1_relop1;



  assign ScrambleEn = Logical_Operator_out1;

  assign ScrambleRst = Relational_Operator1_relop1;

  assign Constant1_out1 = 8'b00000000;



  assign Multiport_Switch_out1 = (Relational_Operator_relop1 == 1'b0 ? Constant1_out1 :
              simDataIn);



  assign Bitwise_Operator_out1 =  ~ Multiport_Switch_out1;



  assign Multiport_Switch1_out1 = (Relational_Operator1_relop1 == 1'b0 ? Multiport_Switch_out1 :
              Bitwise_Operator_out1);



  assign DataIn = Multiport_Switch1_out1;

endmodule  // HeaderProcess

