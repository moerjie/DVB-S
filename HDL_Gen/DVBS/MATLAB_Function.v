// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS\MATLAB_Function.v
// Created: 2024-06-06 19:36:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MATLAB_Function
// Source Path: DVBS/DataSource_Scrambler/sigSource/RS_Gen/MATLAB Function
// Hierarchy Level: 3
// Model version: 1.63
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module MATLAB_Function
          (clk,
           reset_n,
           enb,
           totalLength,
           enable,
           start,
           endSignal);


  input   clk;
  input   reset_n;
  input   enb;
  input   [15:0] totalLength;  // uint16
  output  [7:0] enable;  // uint8
  output  [7:0] start;  // uint8
  output  [7:0] endSignal;  // uint8


  reg [7:0] enable_1;  // uint8
  reg [7:0] start_1;  // uint8
  reg [7:0] endSignal_1;  // uint8
  reg [7:0] cycle;  // uint8
  reg [7:0] cycle_next;  // uint8
  reg [7:0] cycle_temp;  // uint8
  reg [8:0] add_temp;  // ufix9
  reg signed [31:0] t_0;  // int32
  reg signed [31:0] t_1;  // int32
  reg [8:0] t_2;  // ufix9


  always @(posedge clk or negedge reset_n)
    begin : MATLAB_Function_1_process
      if (reset_n == 1'b0) begin
        cycle <= 8'd0;
      end
      else begin
        if (enb) begin
          cycle <= cycle_next;
        end
      end
    end

  always @(cycle, totalLength) begin
    // rsSignals Generate enable, start, and end signals for RS(188,204)
    //
    // Input:
    //   totalLength - Total number of cycles the signals are active
    //
    // Output:
    //   enable - Enable signal (1 during transmission, 0 otherwise) as uint8
    //   start - Start signal (1 at the first cycle, 0 otherwise) as uint8
    //   endSignal - End signal (1 at the last cycle, 0 otherwise) as uint8
    // Persistent variable to keep track of the current cycle, as uint8
    // Increment cycle count
    t_2 = {1'b0, cycle};
    add_temp = t_2 + 9'b000000001;
    if (add_temp[8] != 1'b0) begin
      cycle_temp = 8'b11111111;
    end
    else begin
      cycle_temp = add_temp[7:0];
    end
    // Generate start signal
    if (cycle_temp == 8'd1) begin
      start_1 = 8'd1;
    end
    else begin
      start_1 = 8'd0;
    end
    // Generate enable signal
    t_0 = {24'b0, cycle_temp};
    t_1 = {16'b0, totalLength};
    if ((cycle_temp > 8'd0) && (t_0 <= t_1)) begin
      enable_1 = 8'd1;
    end
    else begin
      enable_1 = 8'd0;
    end
    // Generate end signal
    if (cycle_temp == 8'd188) begin
      endSignal_1 = 8'd1;
      cycle_temp = 8'd0;
    end
    else begin
      endSignal_1 = 8'd0;
    end
    // Reset cycle count after reaching total length
    // if cycle >= totalLength
    //     cycle = uint8(0);
    // end
    cycle_next = cycle_temp;
  end



  assign enable = enable_1;

  assign start = start_1;

  assign endSignal = endSignal_1;

endmodule  // MATLAB_Function

