// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS\RS_Gen.v
// Created: 2024-06-06 19:36:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RS_Gen
// Source Path: DVBS/DataSource_Scrambler/sigSource/RS_Gen
// Hierarchy Level: 2
// Model version: 1.63
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module RS_Gen
          (clk,
           reset_n,
           enb,
           Enable_out2,
           simStart,
           simEnd,
           simEN);


  input   clk;
  input   reset_n;
  input   enb;
  input   Enable_out2;
  output  simStart;
  output  simEnd;
  output  simEN;


  wire enb_gated;
  wire [15:0] Constant_out1;  // uint16
  wire [7:0] enable;  // uint8
  wire [7:0] start;  // uint8
  wire [7:0] endSignal;  // uint8
  wire [7:0] start_1;  // uint8
  reg [7:0] start_last_value;  // uint8
  wire DATA_IN2_out1;
  wire [7:0] endSignal_1;  // uint8
  reg [7:0] endSignal_last_value;  // uint8
  wire DATA_IN3_out1;
  wire [7:0] enable_1;  // uint8
  reg [7:0] enable_last_value;  // uint8
  wire DATA_IN1_out1;


  assign enb_gated = Enable_out2 && enb;

  assign Constant_out1 = 16'b0000000010111100;



  MATLAB_Function u_MATLAB_Function (.clk(clk),
                                     .reset_n(reset_n),
                                     .enb(enb_gated),
                                     .totalLength(Constant_out1),  // uint16
                                     .enable(enable),  // uint8
                                     .start(start),  // uint8
                                     .endSignal(endSignal)  // uint8
                                     );

  always @(posedge clk or negedge reset_n)
    begin : out1_bypass_process
      if (reset_n == 1'b0) begin
        start_last_value <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          start_last_value <= start_1;
        end
      end
    end



  assign start_1 = (Enable_out2 == 1'b0 ? start_last_value :
              start);



  assign DATA_IN2_out1 = (start_1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign simStart = DATA_IN2_out1;

  always @(posedge clk or negedge reset_n)
    begin : out2_bypass_process
      if (reset_n == 1'b0) begin
        endSignal_last_value <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          endSignal_last_value <= endSignal_1;
        end
      end
    end



  assign endSignal_1 = (Enable_out2 == 1'b0 ? endSignal_last_value :
              endSignal);



  assign DATA_IN3_out1 = (endSignal_1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign simEnd = DATA_IN3_out1;

  always @(posedge clk or negedge reset_n)
    begin : out0_bypass_process
      if (reset_n == 1'b0) begin
        enable_last_value <= 8'b00000000;
      end
      else begin
        if (enb_gated) begin
          enable_last_value <= enable_1;
        end
      end
    end



  assign enable_1 = (Enable_out2 == 1'b0 ? enable_last_value :
              enable);



  assign DATA_IN1_out1 = (enable_1 != 8'b00000000 ? 1'b1 :
              1'b0);



  assign simEN = DATA_IN1_out1;

endmodule  // RS_Gen

