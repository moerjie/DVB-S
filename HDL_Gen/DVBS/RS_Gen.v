// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\DVB-S\HDL_Gen\DVBS\RS_Gen.v
// Created: 2024-05-31 21:01:54
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RS_Gen
// Source Path: DVBS/DataSource_Scrambler/sigSource/RS_Gen
// Hierarchy Level: 2
// Model version: 1.56
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RS_Gen
          (clk,
           reset_n,
           enb,
           Trigger,
           simStart,
           simEnd,
           simEN);


  input   clk;
  input   reset_n;
  input   enb;
  input   Trigger;
  output  simStart;
  output  simEnd;
  output  simEN;


  wire enb_gated;
  reg  Trigger_delayed;
  wire Trigger_emulated;
  wire [15:0] Constant_out1;  // uint16
  wire [7:0] enable;  // uint8
  wire [7:0] start;  // uint8
  wire [7:0] endSignal;  // uint8
  wire DATA_IN2_out1;
  wire DATA_IN2_out1_bypass;
  reg  DATA_IN2_out1_last_value;
  wire DATA_IN3_out1;
  wire DATA_IN3_out1_bypass;
  reg  DATA_IN3_out1_last_value;
  wire DATA_IN1_out1;
  wire DATA_IN1_out1_bypass;
  reg  DATA_IN1_out1_last_value;


  always @(posedge clk or negedge reset_n)
    begin : Trigger_delay
      if (!reset_n) begin
        Trigger_delayed <= 1'b1;
      end
      else begin
        if (enb) begin
          Trigger_delayed <= Trigger;
        end
      end
    end

  assign Trigger_emulated = !Trigger_delayed && Trigger;

  assign enb_gated = Trigger_emulated && enb;

  assign Constant_out1 = 16'b0000000011001100;



  MATLAB_Function u_MATLAB_Function (.clk(clk),
                                     .reset_n(reset_n),
                                     .enb(enb_gated),
                                     .totalLength(Constant_out1),  // uint16
                                     .enable(enable),  // uint8
                                     .start(start),  // uint8
                                     .endSignal(endSignal)  // uint8
                                     );

  assign DATA_IN2_out1 = (start != 8'b00000000 ? 1'b1 :
              1'b0);



  always @(posedge clk or negedge reset_n)
    begin : simStart_bypass_process
      if (reset_n == 1'b0) begin
        DATA_IN2_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          DATA_IN2_out1_last_value <= DATA_IN2_out1_bypass;
        end
      end
    end



  assign DATA_IN2_out1_bypass = (Trigger_emulated == 1'b0 ? DATA_IN2_out1_last_value :
              DATA_IN2_out1);



  assign simStart = DATA_IN2_out1_bypass;

  assign DATA_IN3_out1 = (endSignal != 8'b00000000 ? 1'b1 :
              1'b0);



  always @(posedge clk or negedge reset_n)
    begin : simEnd_bypass_process
      if (reset_n == 1'b0) begin
        DATA_IN3_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          DATA_IN3_out1_last_value <= DATA_IN3_out1_bypass;
        end
      end
    end



  assign DATA_IN3_out1_bypass = (Trigger_emulated == 1'b0 ? DATA_IN3_out1_last_value :
              DATA_IN3_out1);



  assign simEnd = DATA_IN3_out1_bypass;

  assign DATA_IN1_out1 = (enable != 8'b00000000 ? 1'b1 :
              1'b0);



  always @(posedge clk or negedge reset_n)
    begin : simEN_bypass_process
      if (reset_n == 1'b0) begin
        DATA_IN1_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          DATA_IN1_out1_last_value <= DATA_IN1_out1_bypass;
        end
      end
    end



  assign DATA_IN1_out1_bypass = (Trigger_emulated == 1'b0 ? DATA_IN1_out1_last_value :
              DATA_IN1_out1);



  assign simEN = DATA_IN1_out1_bypass;

endmodule  // RS_Gen

