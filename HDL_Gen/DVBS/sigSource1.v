// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\FPGA_myself\DVB-S\HDL_Gen\DVBS\sigSource1.v
// Created: 2024-05-23 16:47:49
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-09
// Target subsystem base rate: 1e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// simStart                      ce_out        1e-08
// simEnd                        ce_out        1e-08
// simEN                         ce_out        1e-08
// simDataIn                     ce_out        1e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: sigSource1
// Source Path: DVBS/sigSource1
// Hierarchy Level: 0
// Model version: 1.51
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module sigSource1
          (clk,
           reset_n,
           clk_enable,
           ce_out,
           simStart,
           simEnd,
           simEN,
           simDataIn);


  input   clk;
  input   reset_n;
  input   clk_enable;
  output  ce_out;
  output  simStart;
  output  simEnd;
  output  simEN;
  output  [7:0] simDataIn;  // uint8


  wire enb_1_2_0;
  wire [15:0] Constant_out1;  // uint16
  wire [7:0] enable;  // uint8
  wire [7:0] start;  // uint8
  wire [7:0] endSignal;  // uint8
  wire DATA_IN2_out1;
  reg  DATA_IN2_out1_1;
  wire DATA_IN3_out1;
  reg  DATA_IN3_out1_1;
  wire DATA_IN1_out1;
  reg  DATA_IN1_out1_1;
  wire [31:0] count_step;  // uint32
  wire [31:0] count_from;  // uint32
  reg [31:0] HDL_Counter1_out1;  // uint32
  wire [31:0] count;  // uint32
  wire need_to_wrap;
  wire [31:0] count_value;  // uint32
  wire [9:0] prelookup_idx;  // ufix10
  wire [7:0] out;  // uint8
  reg [7:0] alpha1_D_Lookup_Table1_out1;  // uint8

  initial begin
    alpha1_D_Lookup_Table1_out1 = 8'b00000000;
  end

  assign Constant_out1 = 16'b0000000011001100;



  MATLAB_Function u_MATLAB_Function (.clk(clk),
                                     .reset_n(reset_n),
                                     .enb_1_2_0(clk_enable),
                                     .totalLength(Constant_out1),  // uint16
                                     .enable(enable),  // uint8
                                     .start(start),  // uint8
                                     .endSignal(endSignal)  // uint8
                                     );

  assign DATA_IN2_out1 = (start != 8'b00000000 ? 1'b1 :
              1'b0);



  assign enb_1_2_0 = clk_enable;

  always @(posedge clk or negedge reset_n)
    begin : delayMatch_process
      if (reset_n == 1'b0) begin
        DATA_IN2_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          DATA_IN2_out1_1 <= DATA_IN2_out1;
        end
      end
    end



  assign simStart = DATA_IN2_out1_1;

  assign DATA_IN3_out1 = (endSignal != 8'b00000000 ? 1'b1 :
              1'b0);



  always @(posedge clk or negedge reset_n)
    begin : delayMatch1_process
      if (reset_n == 1'b0) begin
        DATA_IN3_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          DATA_IN3_out1_1 <= DATA_IN3_out1;
        end
      end
    end



  assign simEnd = DATA_IN3_out1_1;

  assign DATA_IN1_out1 = (enable != 8'b00000000 ? 1'b1 :
              1'b0);



  always @(posedge clk or negedge reset_n)
    begin : delayMatch2_process
      if (reset_n == 1'b0) begin
        DATA_IN1_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          DATA_IN1_out1_1 <= DATA_IN1_out1;
        end
      end
    end



  assign simEN = DATA_IN1_out1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1020
  assign count_step = 32'b00000000000000000000000000000001;



  assign count_from = 32'b00000000000000000000000000000000;



  assign count = HDL_Counter1_out1 + count_step;



  assign need_to_wrap = HDL_Counter1_out1 == 32'b00000000000000000000001111111100;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or negedge reset_n)
    begin : HDL_Counter1_process
      if (reset_n == 1'b0) begin
        HDL_Counter1_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter1_out1 <= count_value;
        end
      end
    end



  assign prelookup_idx = (HDL_Counter1_out1 == 32'b00000000000000000000000000000000 ? 10'b0000000000 :
              (HDL_Counter1_out1 >= 32'b00000000000000000000001111111011 ? 10'b1111111011 :
              HDL_Counter1_out1[9:0]));



  assign out = 8'b00000001;



  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb_1_2_0) begin
        alpha1_D_Lookup_Table1_out1 <= out;
      end
    end



  assign simDataIn = alpha1_D_Lookup_Table1_out1;

  assign ce_out = clk_enable;

endmodule  // sigSource1

